// <auto-generated />
using DarthPhotos.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DarthPhotos.Db.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20250503222807_v.0.0.3")]
    partial class v003
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DarthPhotos.Db.Entities.PhotoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PHT_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("PHT_Creator_USR_ID");

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PHT_Hash");

                    b.Property<bool>("IsScanned")
                        .HasColumnType("bit")
                        .HasColumnName("PHT_Is_Scanned");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PHT_Path");

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasColumnName("PHT_Size");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("PHT_Photos");
                });

            modelBuilder.Entity("DarthPhotos.Db.Entities.ScannedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SCN_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SCN_Hash");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit")
                        .HasColumnName("SCN_Is_Processed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SCN_Name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SCN_Path");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("SCN_USR_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PHT_Scanned");
                });

            modelBuilder.Entity("DarthPhotos.Db.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("USR_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Gmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USR_Gmail");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("USR_Is_Admin");

                    b.HasKey("Id");

                    b.ToTable("ADM_Users");
                });

            modelBuilder.Entity("DarthPhotos.Db.Entities.PhotoEntity", b =>
                {
                    b.HasOne("DarthPhotos.Db.Entities.UserEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("DarthPhotos.Db.Entities.ScannedEntity", b =>
                {
                    b.HasOne("DarthPhotos.Db.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
